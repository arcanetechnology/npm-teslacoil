version: "3.7"

services:
  db:
    container_name: postgres
    command:
      - postgres
      - -c
      - logging_collector=on
      - -c
      - log_directory=/var/log/postgresql
      - -c
      - log_filename=postgres.log
      - -c
      - log_statement=all
    build:
      context: docker/postgres
    volumes:
      - postgres:/var/lib/postgresql
    environment: 
      PG_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      # expose default Postgres port as 5434 on host
      # This won't matter for our app (as that'll run in a Docker container that can
      # communicate directly with the container, but it makes it possible to run tests
      # against the docker DB)
      - 5434:5432

  bitcoind:
    # https://github.com/ruimarinho/docker-bitcoin-core
    image: ruimarinho/bitcoin-core:0.18
    container_name: bitcoind

    volumes:
      - bitcoin:/home/bitcoin/.bitcoin
    command:
      - -debug=rpc
      - -printtoconsole
      - -${BITCOIN_NETWORK:-regtest}
      - -rpcuser=$RPCUSER
      - -rpcpassword=$RPCPASS
      - -rpcbind=0.0.0.0
      - -rpcallowip=0.0.0.0/0
      - -txindex
      - -zmqpubrawtx=tcp://0.0.0.0:$ZMQPUBRAWTX_PORT
      - -zmqpubrawblock=tcp://0.0.0.0:$ZMQPUBRAWBLOCK_PORT

  # container for running the API
  dev:
    depends_on:
      - db
      - alice
    build:
      context: .
      dockerfile: Dockerfile
    image: teslacoil
    container_name: teslacoil
    # we need to read Alice's data, to get her macaroon and certificate
    volumes:
      - ./docker/.alice:/root/alice
      - ./logs:/root/logs
    ports:
      # expose the API port
      - "5000:5000"
    environment:
      SENDGRID_API_KEY: # we don't want this to end up in logs
    command:
      - ./tlc
      - --network=${BITCOIN_NETWORK:-regtest}
      - --logging.level=trace
      - --logging.httplevel=info
      - serve
      - --db.password=${DATABASE_PASSWORD}
      - --db.user=${DATABASE_USER}
      - --db.host=postgres # connect to DB running in Postgres container
      - --db.migrationspath=/root/migrations
      - --db.migrateup # always migrate up to newest version
      - --dummy.gen-data # generate dummy data
      - --dummy.force # don't ask for confirmation when generating dummy data
      - --dummy.only-once # only generate dummy data if the DB is empty
      - --lnd.rpchost=alice # Connect to Docker container
      - --lnd.dir=/root/alice
      - --bitcoind.rpcuser=${RPCUSER}
      - --bitcoind.rpcpassword=${RPCPASS}
      - --bitcoind.rpchost=bitcoind # Connect to Docker container
      - --bitcoind.zmqpubrawtx=${ZMQPUBRAWTX_PORT}
      - --bitcoind.zmqpubrawblock=${ZMQPUBRAWBLOCK_PORT}
      - --rsa-jwt-key=sample-private-pkcs1-rsa.pem

  lnd: &lnd
    depends_on:
      - bitcoind
    build:
      context: docker/lnd
      args:
        # we want uid and gid to be the same as the current user
        # this is so permissions work out nicely when reading macaroon
        # files. By default Docker containers run as root, which
        # prevents us from reading the files we need
        uid: $uid
        gid: $gid
        LND_VERSION: '0.8.1-beta'
    environment:
      - RPCUSER
      - RPCPASS
      - BITCOIN_NETWORK
      - RPCHOST=bitcoind
      - DEBUG
      - ZMQPUBRAWTX_PORT
      - ZMQPUBRAWBLOCK_PORT
    command: sh -c './wait-for-bitcoind.sh && ./start-lnd.sh'

  bob:
    <<: *lnd
    container_name: bob
    # expose Bob's LND RPC as a different than ALice's port
    ports:
      - "10010:10009"
    volumes:
      # Map ./.bob to Bobs LND data dir
      - ./docker/.bob:/home/lnd/.lnd

  alice:
    <<: *lnd
    container_name: alice
    # expose Alice's LND RPC port
    ports:
      - "10009:10009"
    volumes:
      # Map ./.alice to Alice's LND data dir
      - ./docker/.alice:/home/lnd/.lnd

volumes:
  # bitcoin volume is needed for maintaining blockchain persistence
  # during bitcoind container recreation.
  bitcoin:

  # postgres volume is needed for persisting DB state
  # across container runs
  postgres:

test:
  image: golang:1.13
  services:
    # If you're updating the postgres image we're using, make sure you've pushed
    # this to the registry. Otherwise the tests won't run with the newest image!
    # docker login registry.gitlab.com
    #  docker build -t registry.gitlab.com/arcanecrypto/teslacoil/postgres docker/postgres/
    #  docker push registry.gitlab.com/arcanecrypto/teslacoil/postgres
    - name: registry.gitlab.com/arcanecrypto/teslacoil/postgres
      # otherwise the host is name of the image
      alias: postgres
  # This is a hack, but that's because GitLab doesn't respect GOPATH etc
  # https://medium.com/@Extrawurst/golang-and-gitlab-ci-da97d11bafe1
  cache:
    paths:
      - .cache
      - .binaries
  variables:
    DATABASE_HOST: postgres
  artifacts:
    paths:
      - coverage.html
  environment:
    name: coverage-report/$CI_BUILD_REF_NAME
    url: https://ci.teslacoil.io/backend-pr-coverage/$CI_BUILD_REF_NAME
  before_script:
    # setup binaries directory
    - mkdir -p .binaries
    - export PATH=$PWD/.binaries/:$PATH

    # download binaries into newly created binaries directory
    - ./scripts/download-lnd.sh
    - ./scripts/download-bitcoind.sh

    # cache things properly
    - mkdir -p $CI_PROJECT_DIR/.cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"

    # make sure we have ssh-agent installed
    - apt-get update

    # start ssh agent
    - eval $(ssh-agent -s)
    # add our key
    - echo $CI_SSH_KEY | openssl base64 -A -d | ssh-add -

  script:
    # run tests
    - go test -cover -coverprofile coverage.out -tags integration  ./...

    # make and upload coverage report
    - go tool cover -html=coverage.out -o coverage.html
    - scp -o StrictHostKeyChecking=no coverage.html root@ci.teslacoil.io:/var/www/html/backend-pr-coverage/$CI_BUILD_REF_NAME/index.html

lint:
  image: golangci/golangci-lint
  cache:
    paths:
      - .cache
  before_script:
    # cache things properly
    - mkdir -p $CI_PROJECT_DIR/.cache
    - export GOPATH="$CI_PROJECT_DIR/.cache"
  script: golangci-lint run --timeout=5m
